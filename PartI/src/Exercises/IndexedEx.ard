\import Exercises.ProofsEx (and)
\import Indexed

-- 1. Implement the function 'lookup', which takes a list and a natural number n and returns the n-th element in the list.
--    Note that it is impossible to define such a function without restrictions on n sice n can be greater than the size of the list.
--    Therefore the function should also take a proof that n is in the right range: T (n < length xs).

\func length {A : \Type} (xs : List A) : Nat
  | nil => 0
  | cons a xs => suc (length xs)

\func lookup {A : \Type} (xs : List A) (n : \Sigma (a : Nat) (a < length xs = true)) : A
  | nil, (0,())
  | nil, (suc n,())
  | cons a xs, (0,p) => a
  | cons a xs, (suc n,p) => lookup xs (n,p)

-- 2. Implement function replicate for 'vec' and 'Vec' (this function creates the list of a given length filled with a
-- given element).

\func repvec {A : \Type} (n : Nat) (a : A) : vec A n \elim n
  | 0 => ()
  | suc n => (a,repvec n a)

\func repVec {A : \Type} (n : Nat) (a : A) : Vec A n \elim n
  | 0 => fnil
  | suc n => fcons a (repVec n a)

-- 3. Implement function 'map' for 'vec' and 'Vec'.

\func mapvec {A B : \Type} {n : Nat} (f : A -> B) (v : vec A n ) : vec B n \elim n
  | 0 => v
  | suc n => (f v.1, mapvec {A} {B} {n} f v.2 )

\func mapVec {A B : \Type} {n : Nat} (f : A -> B) (v : Vec A n ) : Vec B n \elim n,v
  | 0,fnil => fnil
  | suc n,fcons a v => fcons (f a) (mapVec f v)

-- 4. Implement function 'zipWith' for 'vec' and 'Vec'.
--    The function must take lists of equal lengths.

\func zipWithvec {A B : \Type} {n : Nat} (v1 : vec A n) (v2 : vec B n) : vec (\Sigma A B) n \elim n,v1,v2
  | 0, v1, v2 => ()
  | suc n, v1, v2 => ((v1.1,v2.1),zipWithvec v1.2 v2.2)

\func zipWithVec {A B : \Type} {n : Nat} (v1 : Vec A n) (v2 : Vec B n) : Vec (\Sigma A B) n \elim n,v1,v2
  | 0, fnil, fnil => fnil
  | suc n, fcons a1 v1, fcons a2 v2 => fcons (a1,a2) (zipWithVec v1 v2)

-- 5. Functions Fin n -> A correspond to lists of length n with elements in A.
--    Implement the function that converts an element of Fin n -> A to element of Vec A n.

\func funToVec {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => fnil
  | suc n => fcons (f fzero) (funToVec (\lam f' => f (fsuc f')))

-- 6. Define the type of matrices and a number of functions for them:

\func Mat (A : \Type) (n m : Nat) : \Type => Vec (Vec A n) m

-- diagonal matrix with elements e on the diagonal and z at all other positions.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n \elim n
  | 0 => fnil
  | suc n => fcons (fcons e (repVec n z))  (mapVec (\lam v => fcons z v) (diag z e n))

-- transposition

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n \elim n,m,M
  | 0, _, _ => fnil
  | suc n, 0, fnil => fcons fnil (repVec n fnil)
  | suc n, suc m, fcons a v => mapVec (\lam (a,v) => fcons a v) (zipWithVec a (transpose v))

-- addition

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m \elim n,m,M,N
  | _, 0, fnil, fnil => fnil
  | 0, suc m, fcons a v, fcons a1 v1 => fcons fnil (matAdd add 0 m v v1)
  | suc n, suc m, fcons a v, fcons a1 v1 => fcons (mapVec (\lam (e,e1) => add e e1) (zipWithVec a a1)) (matAdd add (suc n) m v v1)

-- multiplication

\func fold {A : \Type} {n : Nat} (z : A) (f : A -> A -> A) (v : Vec A n ) : A \elim n, v
  | 0, fnil => z
  | suc n, fcons a v => f a (fold z f v)

-- z is neutral under addition.
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k
  => mapVec
      (\lam v => mapVec
                  (\lam c => fold z add (mapVec (\lam (a,b) => mul a b) (zipWithVec v c)))
                  (transpose M) )
      N



-- 7. Define the type CTree A n of (complete and full) binary trees of height precisely n, which store elements in internal nodes, but not in leaves.
--    The height of a leaf is 0.

\data CTree (A : \Type) (n : Nat) \with

-- 8. Define the type Tree A n of binary trees of height at most n, which store elements in internal nodes, but not in leaves.
--    The height of a leaf is 0.

\data Tree (A : \Type) (n : Nat)

-- Define the function that computes the height of a tree.

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) => {?}
